"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dictionary_1 = require("./dictionary");
var Event = /** @class */ (function () {
    function Event() {
        this._Events = new dictionary_1.Dictionary();
        this._maxListeners = null;
    }
    Event.prototype.addListener = function (eventName, listener) {
        return this.on(eventName, listener);
    };
    Event.prototype.on = function (eventName, listener) {
        this._registerEvent(eventName, listener, false);
        return this;
    };
    Event.prototype.once = function (eventName, listener) {
        this._registerEvent(eventName, listener, true);
        return this;
    };
    Event.prototype.emit = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var listeners = this._Events.Item(eventName);
        var listenerCount = this.listenerCount(eventName);
        if (listeners) {
            listeners.map(function (listener) { return listener.apply(void 0, args); });
        }
        return listenerCount === 0 ? false : true;
    };
    Event.prototype.eventNames = function () {
        return this._Events.Keys();
    };
    Event.prototype.getMaxListeners = function () {
        return this._maxListeners === null ? Event.defaultMaxListeners : this._maxListeners;
    };
    Event.prototype.setMaxListeners = function (limit) {
        this._maxListeners = limit;
        return this;
    };
    Event.prototype.listeners = function (eventName) {
        return this._Events.Item(eventName);
    };
    Event.prototype.listenerCount = function (eventName) {
        var event = this._Events.Item(eventName);
        return event === undefined ? 0 : event.length;
    };
    Event.prototype.removeAllListeners = function (eventNames) {
        var _this = this;
        if (!eventNames) {
            eventNames = this._Events.Keys();
        }
        eventNames.forEach(function (eventName) { return _this._Events.Remove(eventName); });
        return this;
    };
    Event.prototype.removeListener = function (eventName, listener) {
        var listeners = this.listeners(eventName).filter(function (item) { return item === listener; });
        this._Events.Add(eventName, listeners);
        return this;
    };
    Event.prototype._registerEvent = function (eventName, listener, type) {
        if (this._ListenerLimitReached(eventName)) {
            console.log("Maximum listener reached, new Listener not added");
            return;
        }
        if (type === true) {
            listener = this._createOnceListener(listener, eventName);
        }
        var listeners = this._createListeners(listener, this.listeners(eventName));
        this._Events.Add(eventName, listeners);
        return;
    };
    Event.prototype._createListeners = function (listener, listeners) {
        if (!listeners) {
            listeners = new Array();
        }
        listeners.push(listener);
        return listeners;
    };
    Event.prototype._createOnceListener = function (listener, eventName) {
        var _this = this;
        var newListener = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            _this.removeListener(eventName, listener);
            return listener.apply(void 0, args);
        };
        return newListener;
    };
    Event.prototype._ListenerLimitReached = function (eventName) {
        return this.listenerCount(eventName) === this.getMaxListeners() ? true : false;
    };
    Event.defaultMaxListeners = 10;
    return Event;
}());
exports.Event = Event;
exports.default = Event;
